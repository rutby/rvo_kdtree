{
  "ver": "1.0.27",
  "uuid": "22642122-bf04-48ec-b2a1-34a6c603e86e",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matViewProj;\n  struct StandardVertInput {\n      vec2 uv;\n      vec4 position;\n      vec3 normal;\n      vec4 tangent;\n      vec4 color;\n  };\n  attribute vec3 a_position;\n  #if CC_USE_ATTRIBUTE_UV0\n      attribute vec2 a_uv0;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n      attribute vec4 a_color;\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n      attribute vec3 a_normal;\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n      attribute vec4 a_tangent;\n  #endif\n  void Attribute (out StandardVertInput In) {\n      In.position = vec4(a_position, 1.0);\n      #if CC_USE_ATTRIBUTE_UV0\n          In.uv = a_uv0;\n      #else\n          In.uv = vec2(0.0);\n      #endif\n      #if CC_USE_ATTRIBUTE_COLOR\n          In.color = a_color;\n      #else\n          In.color = vec4(1.0);\n      #endif\n      #if CC_USE_ATTRIBUTE_NORMAL\n          In.normal = a_normal;\n      #else\n          In.normal = vec3(0.0, 1.0, 0.0);\n      #endif\n      #if CC_USE_ATTRIBUTE_TANGENT\n          In.tangent = a_tangent;\n      #else\n          In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n      #endif\n  }\n  void VertInput(out StandardVertInput In) {\n      Attribute(In);\n  }\n  varying mediump vec2 v_uv0;\n  uniform vec2 mainTiling;\nuniform vec2 mainOffset;\n  void main () {\n      StandardVertInput In;\n      VertInput(In);\n      v_uv0 = In.uv * mainTiling + mainOffset;\n      gl_Position = cc_matViewProj * cc_matWorld * In.position;\n  }",
        "frag": "\nprecision highp float;\n  varying mediump vec2 v_uv0;\n  uniform lowp vec4 diffuseColor;\nuniform sampler2D diffuseTexture;\n  uniform sampler2D bakedTexture;\nvoid main () {\n      vec4 o = diffuseColor;\n      o = texture2D(diffuseTexture, v_uv0);\n  gl_FragColor = o;\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  struct StandardVertInput {\n      vec2 uv;\n      vec4 position;\n      vec3 normal;\n      vec4 tangent;\n      vec4 color;\n  };\n  in vec3 a_position;\n  #if CC_USE_ATTRIBUTE_UV0\n      in vec2 a_uv0;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n      in vec4 a_color;\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n      in vec3 a_normal;\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n      in vec4 a_tangent;\n  #endif\n  void Attribute (out StandardVertInput In) {\n      In.position = vec4(a_position, 1.0);\n      #if CC_USE_ATTRIBUTE_UV0\n          In.uv = a_uv0;\n      #else\n          In.uv = vec2(0.0);\n      #endif\n      #if CC_USE_ATTRIBUTE_COLOR\n          In.color = a_color;\n      #else\n          In.color = vec4(1.0);\n      #endif\n      #if CC_USE_ATTRIBUTE_NORMAL\n          In.normal = a_normal;\n      #else\n          In.normal = vec3(0.0, 1.0, 0.0);\n      #endif\n      #if CC_USE_ATTRIBUTE_TANGENT\n          In.tangent = a_tangent;\n      #else\n          In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n      #endif\n  }\n  void VertInput(out StandardVertInput In) {\n      Attribute(In);\n  }\n  out mediump vec2 v_uv0;\n  uniform MAIN_TILING {\n      vec2 mainTiling;\n      vec2 mainOffset;\n  };\n  void main () {\n      StandardVertInput In;\n      VertInput(In);\n      v_uv0 = In.uv * mainTiling + mainOffset;\n      gl_Position = cc_matViewProj * cc_matWorld * In.position;\n  }",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n  in mediump vec2 v_uv0;\n  uniform UNLIT {\n      lowp vec4 diffuseColor;\n  };\nuniform sampler2D diffuseTexture;\n  uniform sampler2D bakedTexture;\nvoid main () {\n      vec4 o = diffuseColor;\n      o = texture(diffuseTexture, v_uv0);\n  gl_FragColor = o;\n  }"
      }
    }
  ],
  "subMetas": {}
}
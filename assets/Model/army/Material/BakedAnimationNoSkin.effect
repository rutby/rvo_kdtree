// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - name: default
    passes:
    - vert: vs
      frag: fs
      depthStencilState:
        depthTest: true
        depthWrite: true
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        diffuseColor: { value: [1, 1, 1, 1], editor: { type: color } }
        mainTiling: { value: [1, 1] }
        mainOffset: { value: [0, 0] }
        diffuseTexture: { value: white }
        bakedTexture: { value: white }
}%

CCProgram vs %{
	precision highp float;

	#include <cc-local>
    #include <cc-global>

    //================================================ 标准输入
    struct StandardVertInput {
        vec2 uv;
        vec4 position;
        vec3 normal;
        vec4 tangent;
        vec4 color;
    };

    in vec3 a_position;

    #if CC_USE_ATTRIBUTE_UV0
        in vec2 a_uv0;
    #endif

    #if CC_USE_ATTRIBUTE_COLOR
        in vec4 a_color;
    #endif

    #if CC_USE_ATTRIBUTE_NORMAL
        in vec3 a_normal;
    #endif

    #if CC_USE_ATTRIBUTE_TANGENT
        in vec4 a_tangent;
    #endif

    void Attribute (out StandardVertInput In) {
        In.position = vec4(a_position, 1.0);

        #if CC_USE_ATTRIBUTE_UV0
            In.uv = a_uv0;
        #else
            In.uv = vec2(0.0);
        #endif
        
        #if CC_USE_ATTRIBUTE_COLOR
            In.color = a_color;
        #else
            In.color = vec4(1.0);
        #endif
        
        #if CC_USE_ATTRIBUTE_NORMAL
            In.normal = a_normal;
        #else
            In.normal = vec3(0.0, 1.0, 0.0);
        #endif

        #if CC_USE_ATTRIBUTE_TANGENT
            In.tangent = a_tangent;
        #else
            In.tangent = vec4(1.0, 0.0, 0.0, 0.0);
        #endif
    }

    void VertInput(out StandardVertInput In) {
        Attribute(In);

        // #if CC_USE_SKINNING
        //     // mat4 m = skinMatrix();

        //     // In.position = m * In.position;

        //     #if CC_USE_ATTRIBUTE_NORMAL
        //         In.normal = (m * vec4(In.normal, 0)).xyz;
        //     #endif

        //     #if CC_USE_ATTRIBUTE_TANGENT
        //         In.tangent = m * In.tangent;
        //     #endif
        // #endif
    }

    //================================================ 自定义部分
    out mediump vec2 v_uv0;

    uniform MAIN_TILING {
        vec2 mainTiling;
        vec2 mainOffset;
    };

    void main () {
        StandardVertInput In;
        VertInput(In);

        v_uv0 = In.uv * mainTiling + mainOffset;

        gl_Position = cc_matViewProj * cc_matWorld * In.position;
    }
}%


CCProgram fs %{
	precision highp float;

	#include <texture>
    #include <output>
    #include <cc-global>
    #include <cc-local>

    in mediump vec2 v_uv0;

    uniform UNLIT {
        lowp vec4 diffuseColor;
    };
	uniform sampler2D diffuseTexture;
    uniform sampler2D bakedTexture;

	void main () {
        vec4 o = diffuseColor;

        o = texture(diffuseTexture, v_uv0);

		gl_FragColor = o;
  	}
}%
